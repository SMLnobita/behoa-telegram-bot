# handlers/callback_handler.py
from telebot.types import ForceReply
from config import MessageLimits
from enums import UserStage
from utils.message_handler import MessageHandler

class CallbackHandler:
    def __init__(self, bot, user_manager):
        """
        Initialize CallbackHandler with required dependencies
        
        Args:
            bot: Telebot instance
            user_manager: UserManager instance
        """
        self.bot = bot
        self.user_manager = user_manager

    def handle_callback(self, call):
        """
        X·ª≠ l√Ω callback t·ª´ c√°c n√∫t inline keyboard

        Args:
            call: Callback query object t·ª´ Telegram
        """
        try:
            user_id = call.message.chat.id
            user_state = self.user_manager.get_user_state(user_id)

            # X·ª≠ l√Ω c√°c lo·∫°i callback kh√°c nhau
            if call.data == "start":
                self._handle_start_callback(user_id)
                
            elif call.data == "clear":
                self._handle_clear_callback(user_id)
                
            elif call.data == "continue":
                self._handle_continue_callback(user_id, user_state)
                
            elif call.data == "request_key":
                self._handle_request_key_callback(user_id, user_state)

            # X√≥a n√∫t sau khi x·ª≠ l√Ω (t√πy ch·ªçn)
            try:
                self.bot.edit_message_reply_markup(
                    chat_id=user_id,
                    message_id=call.message.message_id,
                    reply_markup=None
                )
            except Exception:
                pass

            # K·∫øt th√∫c callback query
            self.bot.answer_callback_query(call.id)

        except Exception as e:
            error_message = f"‚ùå L·ªói x·ª≠ l√Ω callback: {str(e)}"
            self.bot.send_message(
                user_id,
                error_message,
                parse_mode="Markdown"
            )
            self.bot.answer_callback_query(
                call.id,
                text="C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau."
            )

    def _handle_clear_callback(self, user_id):
        """X·ª≠ l√Ω callback khi nh·∫•n n√∫t 'X√≥a l·ªãch s·ª≠'"""
        self.user_manager.clear_user_data(user_id)
        self.bot.send_message(
            user_id,
            "üßπ **L·ªãch s·ª≠ chat ƒë√£ ƒë∆∞·ª£c x√≥a!** B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c chat m·ªõi.",
            parse_mode="Markdown"
        )

    def _handle_continue_callback(self, user_id, user_state):
        """
        X·ª≠ l√Ω callback khi nh·∫•n n√∫t 'Ti·∫øp t·ª•c nh·∫Øn'
        
        Args:
            user_id: ID c·ªßa ng∆∞·ªùi d√πng
            user_state: Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
        """
        if user_state.stage == UserStage.INITIAL:
            user_state.stage = UserStage.EXTENDED
            remaining = MessageLimits.EXTENDED_LIMIT - user_state.message_count
            self.bot.send_message(
                user_id, 
                f"‚ú® B·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•p th√™m {remaining} tin nh·∫Øn!"
            )
        else:
            self.bot.send_message(
                user_id,
                "‚ö†Ô∏è Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c n√†y ·ªü giai ƒëo·∫°n hi·ªán t·∫°i."
            )

    def _handle_request_key_callback(self, user_id, user_state):
        """
        X·ª≠ l√Ω callback khi nh·∫•n n√∫t 'Nh·∫≠p key'
        
        Args:
            user_id: ID c·ªßa ng∆∞·ªùi d√πng
            user_state: Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
        """
        if user_state.stage == UserStage.EXTENDED:
            user_state.waiting_for_key = True
            self.bot.send_message(
                user_id,
                "üîë Vui l√≤ng nh·∫≠p key ƒë·ªÉ ƒë∆∞·ª£c c·∫•p th√™m tin nh·∫Øn:",
                reply_markup=ForceReply()
            )
        else:
            self.bot.send_message(
                user_id,
                "‚ö†Ô∏è Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c n√†y ·ªü giai ƒëo·∫°n hi·ªán t·∫°i."
            )

    def _handle_start_callback(self, user_id):
        """X·ª≠ l√Ω callback khi nh·∫•n n√∫t 'B·∫Øt ƒë·∫ßu'"""
        self.bot.send_message(
            user_id,
            "üí¨ H√£y b·∫Øt ƒë·∫ßu chat!"
        )